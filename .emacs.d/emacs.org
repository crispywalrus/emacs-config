#+TITLE: Vincent Demeester's emacs configuration
#+AUTHOR: Vincent Demeester
#+EMAIL: vincent [at] demeester [dot] fr

#+begin_src
                                                              ___ __
    .-----.--------.---.-.----.-----.______.----.-----.-----.'  _|__|.-----.
    |  -__|        |  _  |  __|__ --|______|  __|  _  |     |   _|  ||  _  |
    |_____|__|__|__|___._|____|_____|      |____|_____|__|__|__| |__||___  |
                                                                     |_____|
#+end_src

This is my first attempt to create a readable, maintainable and self documented
emacs configuration. I'm hopeful that using Org-Babel and a literate
programming style will help.

There is a lot of inspiration for this file, I'm just gonna list the one I took
the most of it :

- [[https://github.com/joodie/emacs-literal-config/blob/master/emacs.org][Joodie emacs-literal-config]]
- [[https://github.com/dakrone/dakrone-dotfiles/blob/master/.emacs.d/settings.org][Dakrone emacs configuration]]
- [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's Emacs configuration]]
- [[https://github.com/steckerhalter/steckemacs/blob/master/steckemacs.org]["Steckemacs" steckerhalter literal emacs config]]
- [[https://github.com/larstvei/dot-emacs][Lartsvei dot-emacs]]
- [[https://github.com/grettke/home/blob/master/.emacs.el][Grettke emacs configuration]]
- [[https://github.com/jkitchin/jmax][Johns customizations to maximize emacs (jmax)]]
- [[https://github.com/jwiegley/dot-emacs][jwiegley dot-emacs]]

This file is an /always/ work-in-progress, and is currently under *heavy* modifications.
The latest version of this file is always available at my [[https://github.com/vdemeester/emacs-config][emacs-config]] github
repository, the [[https://github.com/vdemeester/emacs-config/blob/master/.emacs.d/emacs.org][emacs.org]] file.

* Configuration
** How to my configuration

You can obtain the source by cloning this repository somewhere, but the repository
is made to work with [[https://github.com/RichiH/vcsh][vcsh]].

#+BEGIN_SRC sh
  vcsh clone git://github.com/vdemeester/emacs-config emacs-config
#+END_SRC

If you don't want to use =vcsh= but still want to have my =.emacs.d= folder
in your =$HOME=, you could link it like that :

#+BEGIN_SRC sh
  $ cd $HOME
  $ mkdir -p src
  $ git clone git://github.com/vdemeester/emacs-config src/vde-emacs-config
  $ ln -s src/vde-emacs-config/.emacs.d .
#+END_SRC

*** The =init.el=

If you just want to get the =emacs.org= file, you will have to define and setup
some stuff for this file to work with org-babel. You could take a look to my
[[https://github.com/vdemeester/emacs-config/blob/master/.emacs.d/init.el][init.el]] file but let's show the main stuff.

First you will need to setup packages repository and define a =require-package=
function, let's see what's in there (defined in =lisp/setup-package.el=).


#+BEGIN_SRC emacs-lisp :tangle no
  (require 'package)

  ;; add org to package repos
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))

  ;; add melpa and melpa-stable to package repos
  (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))

  ;; If gpg cannot be found, signature checking will fail, so we
  ;; conditionnally enable it according wether gpg is availabel.
  ;; We re-run this check once $PATH has been configured
  (defun sanityinc/package-maybe-enable-signatures ()
    (setq package-check-signature (when (executable-find "gpg") 'allow-unsigned)))

  (sanityinc/package-maybe-enable-signatures)

  ;; On demand installation of packages
  (defun require-package (package &optional min-version no-refresh)
    "Install given PACKAGE, optionally requiring MIN-VERSION.
  if NO-REFRESH is non-nil, the available package lists will not be
  re-downloaded in order to locate PACKAGE."
    (if (package-installed-p package min-version)
        t
      (if (or (assoc package package-archive-contents) no-refresh)
          (package-install package)
        (progn
          (when (not package-archive-contents)
            (package-refresh-contents))
          (require-package package min-version t)))))

  ;; Fire up package.el
  (package-initialize)

  ;; install fullframe for list-packages
  (require-package 'fullframe)
  (fullframe list-packages quit-window)

  (provide 'setup-package)
#+END_SRC

Let's now see how I load the =emacs.org= file. In the following lines of code,
I'm also ensuring that a recent version of [[http://orgmode.org/][org-mode]] is present on the system ;
if not, I'm unload the current one, installing a recent one and load it.

#+BEGIN_SRC emacs-lisp :tangle no
  ;; Support for Emacs 24 and higher only
  (let ((minver 24))
    (unless (>= emacs-major-version minver)
      (error "Your Emacs is too old -- this config requires v%s or higher" minver)))

  ;; Keep track of loading time
  (defconst emacs-start-time (current-time))

  ;; Add custom lisp files to the load-path
  (add-to-list 'load-path "~/.emacs.d/lisp")

  ;; the unload-org-mode is defined there
  (require 'vde-functions)
  ;; initialize all ELPA packages
  (require 'setup-package)

  ;; (setq package-enable-at-startup nil)
  (let ((elapsed (float-time (time-subtract (current-time)
                                             emacs-start-time))))
    (message "Loaded packages in %.3fs" elapsed))

  ;; Make sure we have a decent and recent org-mode version
  (require 'org)
  (when (string-match "^[1234567]" (org-version))
    (progn
      (warn "Org-mode is out of date. We expect org 8 or higher, but instead we have %s" (org-version))
      (warn "Force the installation from org elpa.")
      (package-install 'org)
      (unload-org-mode)
      (require 'org)
      ))

  ;; keep customize settings in their own file
  (setq custom-file
        (expand-file-name "custom.el"
                          user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))

  ;; load the literate configuration
  (require 'ob-tangle)
  (org-babel-load-file "~/.emacs.d/emacs.org")

  (let ((elapsed (float-time (time-subtract (current-time)
                                             emacs-start-time))))
    (message "Loaded settings...done in %.3fs" elapsed))

#+END_SRC

** Personal information

   #+begin_src emacs-lisp
     (setq user-full-name "Vincent Demeester"
           user-mail-address "vincent@demeester.fr")
   #+end_src

Loads user settings if the file is available. I put all my personal modifications or sensitive information into this file.

#+BEGIN_SRC emacs-lisp
  (when (file-readable-p "~/.emacs.d/user.el")
    (load "~/.emacs.d/user.el"))
#+END_SRC

Same will goes with host-specific files and os-specific files.


#+BEGIN_SRC emacs-lisp
  (setq FULLHOSTNAME (format "%s" system-name))
  (setq HOSTNAME (substring (system-name) 0 (string-match "\\." (system-name))))

  (setq HOSTNAME-FILE
        (expand-file-name
         (format "hosts/%s.el" HOSTNAME)
         "~/.emacs.d"))

  (when (file-readable-p HOSTNAME-FILE)
    (load HOSTNAME-FILE))
#+END_SRC

** General configuration
*** Appearance

    Unclutter the screen by removing menubar, toolbar and stuff, and by disabling
    the splash-screen.

    #+begin_src emacs-lisp
      (menu-bar-mode -1)
      (tool-bar-mode -1)
      (scroll-bar-mode -1)
      (setq inhibit-splash-screen t)
    #+end_src

    We want to see somewhere the column and line number, and also highlight the
    current line to see it easily.

    #+begin_src emacs-lisp
      (line-number-mode 1)
      (column-number-mode 1)
      (global-hl-line-mode 1)
    #+end_src

    Depending on the files opened and the syntax highlighting enabled, ~font-lock-mode~
    can be slow, we try to limit that, to keep Emacs reactive.

    #+begin_src emacs-lisp
      (setq font-lock-maximum-decoration 2)
    #+end_src

**** Fringe decorations

     [[http://www.emacswiki.org/emacs/TheFringe][The fringe]] is the vertical region at the right and left of the
     buffer. Emacs lets you customize it of course.

     Here I set up git diffs and buffer position in the fringe.

     #+NAME: look-and-feel
     #+BEGIN_SRC emacs-lisp
       (setq-default indicate-buffer-boundaries 'left)
       (setq-default indicate-empty-lines +1)
     #+END_SRC

**** Fonts

     #+begin_src emacs-lisp
(set-default-font "Ubuntu Mono-12")
(set-frame-font "Ubuntu Mono-12")
(set-face-attribute 'default nil :family "Ubuntu Mono" :height 110)
     #+end_src

This will set Symbola as fallback-font for Emojis when it is available for the created frame.

     #+BEGIN_SRC emacs-lisp
       (defun my-after-make-frame (frame)
         (when (find-font (font-spec :name "Symbola") frame)
           (dolist (range '((#x2600 . #x26ff)
                            (#x1f300 . #x1f5ff)
                            (#x1f600 . #x1f640)
                            (#x1f680 . #x1f6ff)))
             (set-fontset-font "fontset-default" range "Symbola"))))
       (add-to-list 'after-make-frame-functions 'my-after-make-frame)
     #+END_SRC

**** Themes

     First let's install the theme(s)...

     #+begin_src emacs-lisp
       (require-package 'sublime-themes)
       (require-package 'leuven-theme)
       (require-package 'dakrone-theme)
     #+end_src

     ... and load it.
     #+begin_src emacs-lisp
       (load-theme 'leuven t)
       (set-face-attribute 'org-level-1 nil :height 120)
       ;;(if window-system
       ;;    (enable-theme 'leuven)
       ;;  (enable-theme 'junio))
     #+end_src

     When interactively changing the theme (using M-x load-theme), the current custom theme is not disabled. This often gives weird-looking results; we can advice load-theme to always disable themes currently enabled themes.

     #+BEGIN_SRC emacs-lisp
(defadvice load-theme
  (before disable-before-load (theme &optional no-confirm no-enable) activate)
  (mapc 'disable-theme custom-enabled-themes))
     #+END_SRC

     Let's also install something to have different themes by buffers.

     #+BEGIN_SRC emacs-lisp
       (require-package 'load-theme-buffer-local)
     #+END_SRC

***** TODO Specific theme for modes

**** Powerline

     We are going to use [[https://github.com/milkypostman/powerline][powerline]] because it is way more sexy than the default modeline design.

     #+begin_src emacs-lisp
(require-package 'powerline)
(powerline-default-theme)
     #+end_src
*** Behaviour

    First thing first, let's define a shortcuts for editing this configuration.


    #+BEGIN_SRC emacs-lisp
      (defun my/edit-emacs-configuration ()
        (interactive)
        (find-file "~/.emacs.d/emacs.org"))

      (global-set-key "\C-ce" 'my/edit-emacs-configuration)
    #+END_SRC


    Although I don't really care, let's add a new line at the end of files.
    Some people at work will thank me for that ;-D.

    #+begin_src emacs-lisp
      (setq require-final-newline t)
    #+end_src

Answering yes and no to each question from Emacs can be tedious, a single y or n will suffice.

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

**** DONE Encoding

     Make sur that we use ~utf-8~ by default.

     #+begin_src emacs-lisp
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)
     #+end_src

**** DONE Mouse
     Move the mouse away to not bother.

     #+begin_src emacs-lisp
(mouse-avoidance-mode 'jump)
     #+end_src
**** DONE Backup files

     Files suffixed with =~= in the current directory are ugly. We are still going to use
     backup files, as it can saves some time in case of trouble, but we'll move them
     somewhere else : ~/tmp/emacs-1001~ (for a user with the uid = 1001).

     Note the we store them in /tmp so in case of a reboot, we loose them.

     #+begin_src emacs-lisp
       (defconst emacs-tmp-dir (format "%s/%s%s/" temporary-file-directory "emacs" (user-uid)))
       (setq backup-directory-alist
             `((".*" . ,emacs-tmp-dir))
             auto-save-file-name-transforms
             `((".*" ,emacs-tmp-dir t))
             auto-save-list-file-prefix emacs-tmp-dir)
     #+end_src

     Now that all the temporary files are out of the way, we can keep more of them.

     #+begin_src emacs-lisp
(setq delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)
     #+end_src
**** DONE Buffer names

     Setup uniquify so that non-unique buffer names get the parent path included to make them unique.

     #+begin_src emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
     #+end_src

**** DONE Formatting

     Use space instead on tabs for indentation by default (again some people at work
     will thank me for that).

     #+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
     #+end_src

     Let's define a few /cleaning/ functions :

- untabify the buffer

#+begin_src emacs-lisp
(defun my/untabify-buffer ()
  (interactive)
  (untabify (point-min) (point-max)))
#+end_src

- ident the buffer, using the mode indentation stuff

#+begin_src emacs-lisp
(defun my/indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max)))
#+end_src

- cleanup the buffer

#+begin_src emacs-lisp
  (defun my/cleanup-buffer ()
    "Perform a bunch of operations on the whitespace content of a buffer."
    (interactive)
    (my/indent-buffer)
    (my/untabify-buffer)
    (delete-trailing-whitespace))
#+end_src

- cleanup the region

#+begin_src emacs-lisp
(defun my/cleanup-region (beg end)
  "Remove tmux artifacts from region."
  (interactive "r")
  (dolist (re '("\\\\│\·*\n" "\W*│\·*"))
    (replace-regexp re "" nil beg end)))
#+end_src

And bind =cleanup-buffer= and =cleanup-region=.

#+begin_src emacs-lisp
(global-set-key (kbd "C-x M-t") 'my/cleanup-region)
(global-set-key (kbd "C-c n") 'my/cleanup-buffer)
#+end_src

For writing text, I prefer Emacs to do line wrapping for me.Also, superfluous
white-space should be shown.

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook
            (lambda()
              (turn-on-auto-fill)
              (setq show-trailing-whitespace 't))
            )
#+END_SRC
**** DONE pretty-mode

     Pretty mode turn some stuff prettier, for example in Haskell =/== becomes =≠=, or
     =->= becomes =→=.

     #+BEGIN_SRC emacs-lisp
       (require-package 'pretty-mode)
       (add-hook 'prog-mode-hook
                 'turn-on-pretty-mode)
     #+END_SRC

**** DONE raindow-identifiers

     I read an intersting article about [[https://medium.com/p/3a6db2743a1e/][how to make syntax highlighting more useful]]
     and I really like the concept. And guess what, there's a mode for that.


     #+BEGIN_SRC emacs-lisp
       (require-package 'rainbow-identifiers)
       (add-hook 'prog-mode-hook
                 (lambda() (rainbow-identifiers-mode)))
     #+END_SRC
**** DONE Dired

     Dired is really a cool mode, let's enhance it.


     #+BEGIN_SRC emacs-lisp
       (require-package 'dired+)
     #+END_SRC

**** DONE Search

Make isearch-forward put the cursor at the start of the search, not the end, so that isearch can be used for navigation. See also http://www.emacswiki.org/emacs/IsearchOtherEnd.


#+BEGIN_SRC emacs-lisp
  (defun my-isearch-goto-match-beginning ()
    (when (and isearch-forward (not isearch-mode-end-hook-quit)) (goto-char isearch-other-end)))
  (add-hook 'isearch-mode-end-hook 'my-isearch-goto-match-beginning)
#+END_SRC


**** DONE Notifications
     Emacs now has notifications (freedesktop.org specifications)
     built-in. Let's load it for potential needs.

     #+BEGIN_SRC emacs-lisp
       (require 'notifications)
     #+END_SRC

**** DONE Zoom(ing)

     Being able to zoom in and out can be cool, especially when
     presenting something with emacs ; so that everybody can see
     what's written.

     #+BEGIN_SRC emacs-lisp
       (global-set-key (kbd "C-+") 'text-scale-increase)
       (global-set-key (kbd "C--") 'text-scale-decrease)
     #+END_SRC

**** TODO Evil
*** Server mode

Start a server in not already running. I usually start emacs as a
daemon when at the start of the computer, but you never know =;-)=.

I have an error about /unsafe directory/ for =/tmp/emacs100=, that's
why the advice is there, to ignore the error (from [[http://stackoverflow.com/a/17069276/89249][stackoverflow]]).

#+BEGIN_SRC emacs-lisp
  (defadvice server-ensure-safe-dir (around
                                     my-around-server-ensure-safe-dir
                                     activate)
    "Ignores any errors raised from server-ensure-safe-dir"
    (ignore-errors ad-do-it))
  (unless (string= (user-login-name) "root")
    (require 'server)
    (when (or (not server-process)
             (not (eq (process-status server-process)
                    'listen)))
      (unless (server-running-p server-name)
        (server-start))))
#+END_SRC

** TODO Modes
*** DONE Discover my major

#+BEGIN_QUOTE
    Discover key bindings and their meaning for the current Emacs major mode.

    The command is inspired by discover.el and also uses the makey library. I thought, “Hey! Why not parse the information about the major mode bindings somehow and display that like discover.el does…”
#+END_QUOTE


    #+BEGIN_SRC emacs-lisp
      (require-package 'discover-my-major)
      (global-set-key (kbd "C-h C-m") 'discover-my-major)
    #+END_SRC


*** TODO Prompts
**** DONE ido

     Ido stands for “Interactively DO things”, and even though we'll try to use Helm
     for a lot of things, ido-mode replace beautifuly the default Emacs prompt.

     #+BEGIN_QUOTE
     There are many ways of improving your productivity when you use Emacs, and Ido (or “Interactively DO things”) is one of those packages that you enable and then never, ever turn off again. It’s simply that useful. By super-charging Emacs’s completion engine and improving the speed at which you open files and buffers, you will significantly cut down on the time spent doing these menial tasks.
     #+END_QUOTE

     We're gonna enhance even more ido with some additonnal package :

- A vertical presentation for ido
#+begin_src emacs-lisp
(require-package 'ido-vertical-mode)
#+end_src
- Fuzzy matching for ido (killer-feature !)
#+begin_src emacs-lisp
(require-package 'flx)
(require-package 'flx-ido)
#+end_src
- Use ido and fuzzy matching for ~M-x~, to get first to most recent command used
#+begin_src emacs-lisp
(require-package 'smex)
#+end_src

Let's configure ido, ido-vertical-mode and flx.

#+begin_src emacs-lisp
(require 'recentf)
(setq ido-enable-flex-matching t
     ido-everywhere t
     ido-use-virtual-buffers t
     ido-use-faces nil)
(ido-mode 1)
(ido-vertical-mode 1)
(flx-ido-mode 1)
#+end_src

Let's configure smex.

#+begin_src emacs-lisp
(smex-initialize)

(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
#+end_src

We bind the old ~M-x~ command to another, more complicated keys.

#+begin_src emacs-lisp
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+end_src

**** TODO helm

#+BEGIN_QUOTE
Helm is incremental completion and selection narrowing framework for Emacs. It will help steer you in the right direction when you’re looking for stuff in Emacs (like buffers, files, etc).

Helm is a fork of anything.el originaly written by Tamas Patrovic and can be considered to be its successor. Helm sets out to clean up the legacy code in anything.el and provide a cleaner, leaner and more modular tool, that’s not tied in the trap of backward compatibility.
#+END_QUOTE

     #+begin_src emacs-lisp
       (require-package 'helm)
       (require-package 'helm-descbinds)
       (require-package 'helm-gtags)
     #+end_src

     Let's define that all helm commands will be prefixed by =C-h=,
     =C-h x= will be =Helm M-x=.

     #+BEGIN_SRC emacs-lisp
       (require 'helm-config)
       (setq helm-mode-handle-completion-in-region nil) ; don't use helm for `completion-at-point'
       (helm-mode 1)
       (helm-gtags-mode 1)
       (helm-descbinds-mode)
       (setq helm-idle-delay 0.1)
       (setq helm-input-idle-delay 0.1)
       (setq helm-buffer-max-length 50)
       (setq helm-M-x-always-save-history t)
       (setq helm-buffer-details-flag nil)
       (add-to-list 'helm-completing-read-handlers-alist '(org-refile)) ; helm-mode does not do org-refile well
       (add-to-list 'helm-completing-read-handlers-alist '(org-agenda-refile)) ; same goes for org-agenda-refile
     #+END_SRC

***** DONE helm-swoop

      =helm-swoop= is a great Helm powered buffer search/occur interface:

      #+BEGIN_SRC emacs-lisp
        (require-package 'helm-swoop)
      #+END_SRC

***** DONE helm-google

#+BEGIN_QUOTE
      Emacs Helm Interface for quick Google searches
#+END_QUOTE

      #+BEGIN_SRC emacs-lisp
        (require-package 'helm-google)
      #+END_SRC

*** TODO Auto-complete

    #+BEGIN_QUOTE
    Auto-Complete is an intelligent auto-completion extension for
    Emacs. It extends the standard Emacs completion interface and
    provides an environment that allows users to concentrate more on
    their own work.
    #+END_QUOTE

    Install and use a basic configuration for auto-complete.

    #+BEGIN_SRC emacs-lisp
      (require-package 'auto-complete)
      (require 'auto-complete-config)
      (global-auto-complete-mode t)
      (setq ac-use-quick-help nil)
    #+END_SRC

    And setup default source & co.

    #+BEGIN_SRC emacs-lisp
      (set-default 'ac-sources
                   '(ac-source-imenu
                     ac-source-dictionary
                     ac-source-words-in-buffer
                     ac-source-words-in-same-mode-buffers
                     ac-source-words-in-all-buffer))
      (dolist (mode '(magit-log-edit-mode
                      log-edit-mode org-mode text-mode haml-mode
                      git-commit-mode
                      sass-mode yaml-mode csv-mode espresso-mode haskell-mode
                      html-mode nxml-mode sh-mode smarty-mode clojure-mode
                      lisp-mode textile-mode markdown-mode tuareg-mode
                      js3-mode css-mode less-css-mode sql-mode
                      sql-interactive-mode
                      inferior-emacs-lisp-mode))
        (add-to-list 'ac-modes mode))
    #+END_SRC


*** DONE deft

    #+BEGIN_QUOTE
    Deft is an Emacs mode for quickly browsing, filtering, and editing
    directories of plain text notes, inspired by Notational Velocity.
    #+END_QUOTE

    Deft is cool to use with org-mode, let's use it for notes.

    #+BEGIN_SRC emacs-lisp
      (require-package 'deft)

      (setq deft-extension "org")
      (setq deft-text-mode 'org-mode)
      (setq deft-directory "~/desktop/org/notes")
      (setq deft-use-filename-as-title t)         ;; Use filename as title

      (global-set-key (kbd "<f9>") 'deft)
    #+END_SRC

*** TODO Version control integration
**** TODO Git

#+begin_src emacs-lisp
  (require-package 'git-commit-mode)
  (require-package 'git-rebase-mode)
  (require-package 'gitignore-mode)
  (require-package 'gitconfig-mode)
  (require-package 'gitattributes-mode)
#+end_src


***** TODO magit

#+begin_src emacs-lisp
        (require-package 'magit)
        (global-set-key "\C-cg" 'magit-status)
#+end_src

****** DONE Magit git-svn integration

       At work, I use ~git-svn~ to be able to use git locally but integrating in the
       subversion they use. Integrating ~magit~ and ~git-svn~ is a bonus but, as it
       exists, let's do it :).

       #+begin_src emacs-lisp
(require-package 'magit-svn)
       #+end_src

       The /quick key/ to get the ~magit-svn~ menu is ~N~.
***** TODO git fringe decoration

#+begin_src emacs-lisp
     (when (window-system)
       (require-package 'git-gutter-fringe)
       (global-git-gutter-mode +1))
#+end_src emacs-lisp

***** DONE git-annex

      [[http://git-annex.branchable.com/][Git-annex]] is a wonderful piece of software that I use a lot in my repositories.

      #+BEGIN_QUOTE
      git-annex allows managing files with git, without checking the file contents into git. While that may seem paradoxical, it is useful when dealing with files larger than git can currently easily handle, whether due to limitations in memory, time, or disk space.
      #+END_QUOTE

      In Emacs, it integrates with magit and dired mode. The annex subcommand for magit is ~@~.

      #+begin_src emacs-lisp
(require-package 'git-annex)
(require-package 'magit-annex)
      #+end_src

***** TODO gitty
***** DONE git-timemachine
I recently discovered an extremely cool package called git-timemachine that allows you to step though the git history of the file you’re currently editing in Emacs.

#+BEGIN_SRC emacs-lisp
        (require-package 'git-timemachine)
#+END_SRC


***** TODO git-blame


#+BEGIN_SRC emacs-lisp
        (require-package 'git-blame)
#+END_SRC


***** TODO github

      # gist, githubclone, ..
**** TODO Mercurial
*** DONE highlight-symbol

#+BEGIN_QUOTE
Automatic and manual symbol highlighting for Emacs
#+END_QUOTE

Highlights the word/symbol at point and any other occurrences in
view. Also allows to jump to the next or previous occurrence.


#+BEGIN_SRC emacs-lisp
  (require-package 'highlight-symbol)
  (setq highlight-symbol-on-navigation-p t)
  (add-hook 'prog-mode-hook 'highlight-symbol-mode)

  (global-set-key [(control f3)] 'highlight-symbol-at-point)
  (global-set-key [f3] 'highlight-symbol-next)
  (global-set-key [(shift f3)] 'highlight-symbol-prev)
  (global-set-key [(meta f3)] 'highlight-symbol-query-replace)
#+END_SRC

*** DONE move-text

Allows to move the current line or region up/down. The source code is
on the Wiki: http://www.emacswiki.org/emacs/move-text.el

    #+BEGIN_SRC emacs-lisp
      (require-package 'move-text)
      (move-text-default-bindings)
    #+END_SRC

*** DONE multiple-cursors

Multiple cursors for Emacs, this is a pretty /badass/ functionnality.

#+BEGIN_SRC emacs-lisp
  (require-package 'multiple-cursors)
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC


*** TODO Flycheck

#+BEGIN_QUOTE
Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs 24, intended as replacement for the older Flymake extension which is part of GNU Emacs.

It uses various syntax checking and linting tools to check the contents of buffers, and reports warnings and errors directly in the buffer, or in an optional error list.
#+END_QUOTE

Let's install it and configure it for the common part. The language
specifics will be defined in the corresponding language section.

#+BEGIN_SRC emacs-lisp
  (require-package 'flycheck)
  ;; (add-hook 'prog-mode-hook 'flycheck-mode)
  (add-hook 'after-init-hook #'global-flycheck-mode)

  (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)) ;disable the annoying doc checker

  (setq flycheck-indication-mode 'right-fringe)
#+END_SRC

*** TODO Org

    #+BEGIN_QUOTE
    Org-mode is a powerful system for organizing your complex life with simple plain-text files. It seamlessly integrates all your notes, mindmaps, TODO lists, calendar, day planner, and project schedules into a single system that can be easily searched (e.g. by grep), encrypted (e.g. by GnuPG), backed up and synced (e.g. by Dropbox), imported/exported, and accessed on the go (e.g. on an iPhone or Android smartphone). It can even be used for authoring web pages and documents.
    #+END_QUOTE

    Depending on how this section grows, org-mode might need its own litterate
    org configuration file.

**** Standard configuration

     First let's define the default directory for the =org= files, the one to be added
     to the agenda and the archives.

     #+begin_src emacs-lisp
(setq org-directory "~/desktop/org/")
(setq org-agenda-files '("~/desktop/org/todos/"))
(setq org-archive-location (concat org-directory "archive/%s_archive::"))
     #+end_src

     We'll also set which files should be opened using org-mode :
     =*.org=, =*.org_archive=, =*.txt=.

     #+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
     #+end_src

     Let's also define the default /todo-keywords/ and the workflow between them.

     #+begin_src emacs-lisp
       (setq org-todo-keywords
             (quote ((sequence "TODO(t)" "NEXT(n)" "PROGRESS(p)" "|" "DONE(d)")
                     (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING")
                     (sequence "REPORT" "BUG" "KNOWNCAUSE" "|" "FIXED"))))


       (setq org-todo-keyword-faces
             (quote (("TODO" :foreground "#EE0000" :weight bold)
                     ("NEXT" :foreground "#A197BF" :weight bold)
                     ("PROGRESS" :foreground "#A197BF" :weight bold)
                     ("DONE" :foreground "#8fbfdc" :weight bold)
                     ("WAITING" :foreground "orange" :weight bold)
                     ("HOLD" :foreground "magenta" :weight bold)
                     ("CANCELLED" :foreground "forest green" :weight bold)
                     ("MEETING" :foreground "forest green" :weight bold)
                     ("PHONE" :foreground "forest green" :weight bold))))

       (setq org-todo-state-tags-triggers
             (quote (("CANCELLED" ("CANCELLED" . t))
                     ("WAITING" ("WAITING" . t))
                     ("HOLD" ("WAITING" . t) ("HOLD" . t))
                     (done ("WAITING") ("HOLD"))
                     ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                     ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                     ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
     #+end_src

     Undefine some binding (=C-c [=, =C-c ]= since this breaks org-agenda files that
     have been defined in this file (a directory).

     #+begin_src emacs-lisp
       (add-hook 'org-mode-hook
                 '(lambda ()
                    (org-defkey org-mode-map "\C-c[" 'undefined)
                    (org-defkey org-mode-map "\C-c]" 'undefined)
                    (org-defkey org-mode-map "\C-c;" 'undefined))
                 'append)
     #+end_src

     All org-mode buffers will be automatically saved each hours.

     #+BEGIN_SRC emacs-lisp
       (run-at-time "00:59" 3600 'org-save-all-org-buffers)
     #+END_SRC

     And add some miscellaneous stuff.

     #+BEGIN_SRC emacs-lisp
       (setq
        org-completion-use-ido t         ;; use IDO for completion
        org-cycle-separator-lines 0      ;; Don't show blank lines
        org-catch-invisible-edits 'error ;; don't edit invisible text
        )
     #+END_SRC

**** DONE Speed commands

     Org-mode speed keys (or spee commands) are really cool, here is a
     quotation from the manual

     #+BEGIN_QUOTE
     Single keys can be made to execute commands when the cursor is at the beginning of a headline, i.e., before the first star.
     #+END_QUOTE

     #+BEGIN_SRC emacs-lisp
       (setq org-use-speed-commands t)
     #+END_SRC

     However the default =n= (next) and =p= (previous) speed keys
     aren't optimal for my use. When I go to the next one using speed
     commands I want the others closed. Let's redefine it.

     #+BEGIN_SRC emacs-lisp
       (defun my/org-show-next-heading-tidily ()
         "Show next entry, keeping other entries closed."
         (if (save-excursion (end-of-line) (outline-invisible-p))
             (progn (org-show-entry) (show-children))
           (outline-next-heading)
           (unless (and (bolp) (org-on-heading-p))
             (org-up-heading-safe)
             (hide-subtree)
             (error "Boundary reached"))
           (org-overview)
           (org-reveal t)
           (org-show-entry)
           (show-children)))

       (defun my/org-show-previous-heading-tidily ()
         "Show previous entry, keeping other entries closed."
         (let ((pos (point)))
           (outline-previous-heading)
           (unless (and (< (point) pos) (bolp) (org-on-heading-p))
             (goto-char pos)
             (hide-subtree)
             (error "Boundary reached"))
           (org-overview)
           (org-reveal t)
           (org-show-entry)
           (show-children)))
     #+END_SRC

     And let's bind it.

     #+BEGIN_SRC emacs-lisp
       (add-to-list 'org-speed-commands-user
                    '("n" my/org-show-next-heading-tidily))
       (add-to-list 'org-speed-commands-user
                    '("p" my/org-show-previous-heading-tidily))
     #+END_SRC

**** TODO Captures
**** DONE Code blocks

     We are using a lot of code block in org-mode, in this file for example ; let's
     /fontify/ the code blocks first.

     #+begin_src emacs-lisp
(setq org-src-fontify-natively t)
     #+end_src

     Add a function to easily add a code block and bind it.

     #+begin_src emacs-lisp
       (defun my/org-insert-src-block (src-code-type)
         "Insert a `SRC-CODE-TYPE' type source code block in org-mode."
         (interactive
          (let ((src-code-types
                 '("emacs-lisp" "python" "C" "sh" "java" "js" "clojure" "C++" "css"
                   "calc" "asymptote" "dot" "gnuplot" "ledger" "lilypond" "mscgen"
                   "octave" "oz" "plantuml" "R" "sass" "screen" "sql" "awk" "ditaa"
                   "haskell" "latex" "lisp" "matlab" "ocaml" "org" "perl" "ruby"
                   "scheme" "sqlite")))
            (list (ido-completing-read "Source code type: " src-code-types))))
         (progn
           (newline-and-indent)
           (insert (format "#+BEGIN_SRC %s\n" src-code-type))
           (newline-and-indent)
           (insert "#+END_SRC\n")
           (previous-line 2)
           (org-edit-src-code)))

       (add-hook 'org-mode-hook
                 '(lambda ()
                    (local-set-key (kbd "C-c s e") 'org-edit-src-code)
                    (local-set-key (kbd "C-c s i") 'my/org-insert-src-block))
                 'append)
     #+end_src

**** TODO Templates
**** DONE Mobile

Define some stuff for the /org-mobile/ synchronization. The
=org-mobile-directory= is a on a remote ssh, defined in the
=~/.emacs.d/user.el= file.

#+BEGIN_SRC emacs-lisp
  (require 'org-mobile)
  (setq org-mobile-directory 'personal-org-mobile-directory)
  (setq org-mobile-inbox-for-pull "~/desktop/org/todos/inbox.org")
  (setq org-mobile-files '("~/desktop/org/todos/"))
#+END_SRC
**** DONE Archives

We want to be able to archive some /done/ projects. Let's load
org-archive and configure it.

     #+BEGIN_SRC emacs-lisp
       (require 'org-archive)
       (setq org-archive-location (concat org-directory "archive/%s_archive::"))
     #+END_SRC
**** TODO Tags

     #+BEGIN_SRC emacs-lisp
       (setq org-tags-column -90)
     #+END_SRC
**** TODO Time tracking & Pomodoros
**** TODO Agenda(s)
**** TODO Integration with git
***** TODO Auto-commit when pushing with org-mobile
***** TODO Notifications
**** TODO Externals (caldav, issues, ..)
*** TODO Projectile

    #+BEGIN_QUOTE
    Projectile is a project interaction library for Emacs. Its goal is
    to provide a nice set of features operating on a project level
    without introducing external dependencies(when feasible). For
    instance - finding project files has a portable implementation
    written in pure Emacs Lisp without the use of GNU find (but for
    performance sake an indexing mechanism backed by external commands
    exists as well).
    #+END_QUOTE


    #+BEGIN_SRC emacs-lisp
      (require-package 'projectile)
      ;; Integrate with helm
      (require-package 'helm-projectile)
    #+END_SRC


    #+BEGIN_SRC emacs-lisp
      (projectile-global-mode)
    #+END_SRC


*** DONE Compilation mode improvements

See http://stackoverflow.com/questions/3072648/cucumbers-ansi-colors-messing-up-emacs-compilation-buffer


#+BEGIN_SRC emacs-lisp
  (require 'ansi-color)
  (defun my/colorize-compilation-buffer ()
    (toggle-read-only)
    (ansi-color-apply-on-region (point-min) (point-max))
    (toggle-read-only))
  (add-hook 'compilation-filter-hook 'my/colorize-compilation-buffer)
#+END_SRC

And let's configure the compilation-mode to follow the compilation, not waiting
at the top..


#+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output t)
#+END_SRC

*** TODO Lua

    #+BEGIN_SRC emacs-lisp
      (require-package 'lua-mode)
    #+END_SRC

*** TODO Haskell

    #+begin_src emacs-lisp
(require-package 'haskell-mode)
(require-package 'ghc)
(require-package 'ghci-completion)
(require-package 'shm)
    #+end_src

**** DONE Flycheck

     #+BEGIN_SRC emacs-lisp
       (require-package 'flycheck-haskell)
       (eval-after-load 'flycheck
         '(add-hook 'flycheck-mode-hook #'flycheck-haskell-setup))
     #+END_SRC

*** TODO Lisp(s)
**** TODO General

Let's install some LISP common useful modes.

#+BEGIN_SRC emacs-lisp
  (require-package 'paredit)
  (require-package 'rainbow-mode)
  (require-package 'rainbow-delimiters)
  (require-package 'highlight-parentheses)
#+END_SRC

And define a comme lisp hook for all LISP-related prog-modes, mostly about
parentheses.

#+BEGIN_SRC emacs-lisp
  (defun my/lisps-mode-hook ()
    (paredit-mode t)
    (rainbow-delimiters-mode t)
    (highlight-parentheses-mode t))
#+END_SRC

**** TODO Emacs lisp


     #+BEGIN_SRC emacs-lisp
       (add-hook 'emacs-lisp-mode-hook
                 (lambda ()
                   (my/lisps-mode-hook)
                   (eldoc-mode 1))
                 )
     #+END_SRC

**** TODO Clojure

     #+BEGIN_SRC emacs-lisp
       (require-package 'clojure-mode)
     #+END_SRC


     #+BEGIN_SRC emacs-lisp
       (add-hook 'clojure-mode-hook 'my/lisps-mode-hook)
     #+END_SRC


***** TODO cider

      #+BEGIN_SRC emacs-lisp
        (require-package 'cider)
      #+END_SRC

*** TODO Java

*** TODO Python

*** TODO Ruby

I don't really use [[https://www.ruby-lang.org/][Ruby]] that much but when I need to work on a Ruby project
I want to have a decent configuration.

Tell Emacs rake, bundler files and =*.erb= are Ruby files.

#+BEGIN_SRC emacs-lisp
  (dolist (exp '("Rakefile\\'" "\\.rake\\'" "Gemfile\\'" "\\.erb\\'"))
    (add-to-list 'auto-mode-alist
                 (cons exp 'ruby-mode)))
#+END_SRC

*** TODO Shell(s)
**** DONE Theme

     Let's use a local theme for the shells.

     #+BEGIN_SRC emacs-lisp
       ;;(defun my/term-theme-hook ()
       ;;  (load-theme-buffer-local 'dakrone))
       ;;(add-hook 'term-mode-hook 'my/term-theme-hook)
     #+END_SRC

*** TODO Go

*** TODO Docker

*** TODO fic-mode
*** TODO Linux related modes
**** TODO Archlinux
     I'm using [[http://archlinux.org][Archlinux]] on my personnal computers and I maintain a few packages
     on [[https://aur.archlinux.org][aur]], hopefully there is a mode for that.

     #+BEGIN_SRC emacs-lisp
       (require-package 'pkgbuild-mode)
     #+END_SRC

**** TODO Debian
*** DONE Markdown

    #+BEGIN_SRC emacs-lisp
      (require-package 'markdown-mode)
      (require-package 'markdown-mode+)
    #+END_SRC


*** DONE Yaml

    #+BEGIN_SRC emacs-lisp
      (require-package 'yaml-mode)
    #+END_SRC

*** TODO Ansible

[[http://docs.ansible.com/index.html][Ansible]] is a great automation tool I use to manage my servers and
desktops.

#+BEGIN_SRC emacs-lisp
  (require-package 'ansible)
  (add-hook 'yaml-mode-hook '(lambda () (ansible 1)))
#+END_SRC

The following snippet is taken from [[http://www.lunaryorn.com/2014/07/18/ansible-docs-in-emacs.html][lunaryorn article]] about getting
ansible doc in emacs.

#+BEGIN_SRC emacs-lisp
  (defconst lunaryorn-ansible-doc-buffer " *Ansible Doc*"
    "The Ansible Doc buffer.")

  (defvar lunaryorn-ansible-modules nil
    "List of all known Ansible modules.")

  (defun lunaryorn-ansible-modules ()
    "Get a list of all known Ansible modules."
    (unless lunaryorn-ansible-modules
      (let ((lines (ignore-errors (process-lines "ansible-doc" "--list")))
            modules)
        (dolist (line lines)
          (push (car (split-string line (rx (one-or-more space)))) modules))
        (setq lunaryorn-ansible-modules (sort modules #'string<))))
    lunaryorn-ansible-modules)

  (defun lunaryorn-ansible-doc (module)
    "Show ansible doc for MODULE."
    (interactive
     (list (ido-completing-read "Ansible Module: "
                                (lunaryorn-ansible-modules)
                                nil nil nil nil nil
                                (thing-at-point 'symbol 'no-properties))))
    (let ((buffer (get-buffer-create lunaryorn-ansible-doc-buffer)))
      (with-current-buffer buffer
        (setq buffer-read-only t)
        (view-mode)
        (let ((inhibit-read-only t))
          (erase-buffer)
          (call-process "ansible-doc" nil t t module))
        (goto-char (point-min)))
      (display-buffer buffer)))
#+END_SRC

Let's bind it.

#+BEGIN_SRC emacs-lisp
  (eval-after-load 'yaml-mode
    '(define-key yaml-mode-map (kbd "C-c h a") 'lunaryorn-ansible-doc))
#+END_SRC

*** DONE vim

    I tend to use vim for quick edit and other stuff and have a decent
    configuration. And sometimes I edit the configuration, from emacs so, let's
    had support for that.

    #+BEGIN_SRC emacs-lisp
    (require-package 'vimrc-mode)
    #+END_SRC

*** TODO Spellcheck (flyspell)
** TODO Mails

   Add mu4e to the load-path and load it.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
     (require 'mu4e)
   #+END_SRC

   Set the maildir, folders and stuff.

   #+BEGIN_SRC emacs-lisp
     (setq mu4e-maildir (expand-file-name "~/desktop/mails"))
     (setq mu4e-drafts-folder "/main/Drafts")
     (setq mu4e-sent-folder   "/main/Sent")
     (setq mu4e-trash-folder  "/main/Trash")

     (setq mu4e-get-mail-command "offlineimap")
     (setq mu4e-html2text-command "html2text")
   #+END_SRC


