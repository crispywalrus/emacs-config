#+TITLE: Vincent Demeester's emacs configuration
#+AUTHOR: Vincent Demeester
#+EMAIL: vincent [at] demeester [dot] fr

#+begin-src
    .-----.--------.---.-.----.-----.______.----.-----.-----.'  _|__|.-----.
    |  -__|        |  _  |  __|__ --|______|  __|  _  |     |   _|  ||  _  |
    |_____|__|__|__|___._|____|_____|      |____|_____|__|__|__| |__||___  |
                                                                     |_____|
#+end_src

This is my first attempt to create a readable, maintainable and self documented
emacs configuration. I'm hopeful that using Org-Babel and a literate
programming style will help.

There is a lot of inspiration for this file, I'm just gonna list the one I took
the most of it : 

- [[https://github.com/joodie/emacs-literal-config/blob/master/emacs.org][Joodie emacs-literal-config]]
- [[https://github.com/dakrone/dakrone-dotfiles/blob/master/.emacs.d/settings.org][Dakrone emacs configuration]]
- [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's Emacs configuration]]
- [[https://github.com/steckerhalter/steckemacs/blob/master/steckemacs.org]["Steckemacs" steckerhalter literal emacs config]]
- [[https://github.com/larstvei/dot-emacs][Lartsvei dot-emacs]]
- [[https://github.com/grettke/home/blob/master/.emacs.el][Grettke emacs configuration]]
- [[https://github.com/jkitchin/jmax][Johns customizations to maximize emacs (jmax)]]
- [[https://github.com/jwiegley/dot-emacs][jwiegley dot-emacs]]

This file is an /always/ work-in-progress, and is currently under *heavy* modifications.
The latest version of this file is always available at my [[https://github.com/vdemeester/emacs-config][emacs-config]] github
repository, the [[https://github.com/vdemeester/emacs-config/blob/master/.emacs.d/emacs.org][emacs.org]] file. 

* Configuration
** How to my configuration

You can obtain the source by cloning this repository somewhere, but the repository
is made to work with [[https://github.com/RichiH/vcsh][vcsh]].

#+BEGIN_SRC sh
  vcsh clone git://github.com/vdemeester/emacs-config emacs-config
#+END_SRC

If you don't want to use =vcsh= but still want to have my =.emacs.d= folder
in your =$HOME=, you could link it like that :


#+BEGIN_SRC sh
  cd $HOME
  mkdir -p src
  git clone git://github.com/vdemeester/emacs-config src/vde-emacs-config
  ln -s src/vde-emacs-config/.emacs.d .
#+END_SRC

*** The =init.el=

If you just want to get the =emacs.org= file, you will have to define and setup
some stuff for this file to work with org-babel. You could take a look to my
[[https://github.com/vdemeester/emacs-config/blob/master/.emacs.d/init.el][init.el]] file but let's show the main stuff.

First you will need to setup packages repository and define a =require-package=
function, let's see what's in there (defined in =lisp/setup-package.el=).


#+BEGIN_SRC emacs-lisp :tangle no
  (require 'package)

  ;; add org to package repos
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))

  ;; add melpa and melpa-stable to package repos
  (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))

  ;; If gpg cannot be found, signature checking will fail, so we
  ;; conditionnally enable it according wether gpg is availabel.
  ;; We re-run this check once $PATH has been configured
  (defun sanityinc/package-maybe-enable-signatures ()
    (setq package-check-signature (when (executable-find "gpg") 'allow-unsigned)))

  (sanityinc/package-maybe-enable-signatures)

  ;; On demand installation of packages
  (defun require-package (package &optional min-version no-refresh)
    "Install given PACKAGE, optionally requiring MIN-VERSION.
  if NO-REFRESH is non-nil, the available package lists will not be
  re-downloaded in order to locate PACKAGE."
    (if (package-installed-p package min-version)
        t
      (if (or (assoc package package-archive-contents) no-refresh)
          (package-install package)
        (progn
          (when (not package-archive-contents)
            (package-refresh-contents))
          (require-package package min-version t)))))

  ;; Fire up package.el
  (package-initialize)

  ;; install fullframe for list-packages
  (require-package 'fullframe)
  (fullframe list-packages quit-window)

  (provide 'setup-package)
#+END_SRC

Let's now see how I load the =emacs.org= file. In the following lines of code,
I'm also ensuring that a recent version of [[http://orgmode.org/][org-mode]] is present on the system ;
if not, I'm unload the current one, installing a recent one and load it.

#+BEGIN_SRC emacs-lisp :tangle no
  ;; Support for Emacs 24 and higher only
  (let ((minver 24))
    (unless (>= emacs-major-version minver)
      (error "Your Emacs is too old -- this config requires v%s or higher" minver)))

  ;; Keep track of loading time
  (defconst emacs-start-time (current-time))

  ;; Add custom lisp files to the load-path
  (add-to-list 'load-path "~/.emacs.d/lisp")

  ;; the unload-org-mode is defined there
  (require 'vde-functions)
  ;; initialize all ELPA packages
  (require 'setup-package)

  ;; (setq package-enable-at-startup nil)
  (let ((elapsed (float-time (time-subtract (current-time)
                                             emacs-start-time))))
    (message "Loaded packages in %.3fs" elapsed))

  ;; Make sure we have a decent and recent org-mode version
  (require 'org)
  (when (string-match "^[1234567]" (org-version))
    (progn
      (warn "Org-mode is out of date. We expect org 8 or higher, but instead we have %s" (org-version))
      (warn "Force the installation from org elpa.")
      (package-install 'org)
      (unload-org-mode)
      (require 'org)
      ))

  ;; keep customize settings in their own file
  (setq custom-file
        (expand-file-name "custom.el"
                          user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))

  ;; load the literate configuration
  (require 'ob-tangle)
  (org-babel-load-file "~/.emacs.d/emacs.org")

  (let ((elapsed (float-time (time-subtract (current-time)
                                             emacs-start-time))))
    (message "Loaded settings...done in %.3fs" elapsed))

#+END_SRC


** Personal information
   
   #+begin_src emacs-lisp
     (setq user-full-name "Vincent Demeester"
           user-mail-address "vincent@demeester.fr")
   #+end_src

** General configuration

*** Appearance

    Unclutter the screen by removing menubar, toolbar and stuff, and by disabling
    the splash-screen.

    #+begin_src emacs-lisp
      (menu-bar-mode -1)
      (tool-bar-mode -1)
      (scroll-bar-mode -1)
      (setq inhibit-splash-screen t)
    #+end_src

    We want to see somewhere the column and line number, and also highlight the
    current line to see it easily.

    #+begin_src emacs-lisp
(line-number-mode 1)
(column-number-mode 1)
(global-hl-line-mode 1)
    #+end_src

    Depending on the files opened and the syntax highlighting enabled, ~font-lock-mode~
    can be slow, we try to limit that, to keep Emacs reactive.

    #+begin_src emacs-lisp
(setq font-lock-maximum-decoration 2)
    #+end_src
**** Fringe decorations

     [[http://www.emacswiki.org/emacs/TheFringe][The fringe]] is the vertical region at the right and left of the
     buffer. Emacs lets you customize it of course.

     Here I set up git diffs and buffer position in the fringe.

     #+NAME: look-and-feel
     #+BEGIN_SRC emacs-lisp
(setq-default indicate-buffer-boundaries 'left)
(setq-default indicate-empty-lines +1)
     #+END_SRC
**** Fonts

     #+begin_src emacs-lisp
(set-default-font "Ubuntu Mono-12")
(set-frame-font "Ubuntu Mono-12")
(set-face-attribute 'default nil :family "Ubuntu Mono" :height 110)
     #+end_src

**** Themes

     First let's install the theme(s)...

     #+begin_src emacs-lisp
(require-package 'sublime-themes)
(require-package 'leuven-theme)
(require-package 'dakrone-theme)
     #+end_src

     ... and load it.
     #+begin_src emacs-lisp
(load-theme 'leuven t)
(set-face-attribute 'org-level-1 nil :height 120)
;; (load-theme 'dakrone t)
     #+end_src

***** TODO Specific theme for modes

**** Powerline

     We are going to use [[https://github.com/milkypostman/powerline][powerline]] because it is way more sexy than the default modeline design.

     #+begin_src emacs-lisp
(require-package 'powerline)
(powerline-default-theme)
     #+end_src

*** Behaviour

    Although I don't really care, let's add a new line at the end of files.
    Some people at work will thank me for that ;-D.

    #+begin_src emacs-lisp
(setq require-final-newline t)
    #+end_src

**** DONE Encoding

     Make sur that we use ~utf-8~ by default.

     #+begin_src emacs-lisp
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)
     #+end_src

**** DONE Mouse
     Move the mouse away to not bother.

     #+begin_src emacs-lisp
(mouse-avoidance-mode 'jump)
     #+end_src
**** DONE Backup files

     Files suffixed with =~= in the current directory are ugly. We are still going to use
     backup files, as it can saves some time in case of trouble, but we'll move them
     somewhere else : ~/tmp/emacs-1001~ (for a user with the uid = 1001).

     Note the we store them in /tmp so in case of a reboot, we loose them.

     #+begin_src emacs-lisp
       (defconst emacs-tmp-dir (format "%s/%s%s/" temporary-file-directory "emacs" (user-uid)))
       (setq backup-directory-alist
             `((".*" . ,emacs-tmp-dir))
             auto-save-file-name-transforms
             `((".*" ,emacs-tmp-dir t))
             auto-save-list-file-prefix emacs-tmp-dir)
     #+end_src

     Now that all the temporary files are out of the way, we can keep more of them.

     #+begin_src emacs-lisp
(setq delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)
     #+end_src
**** DONE Buffer names

     Setup uniquify so that non-unique buffer names get the parent path included to make them unique.

     #+begin_src emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
     #+end_src

**** DONE Formatting

     Use space instead on tabs for indentation by default (again some people at work
     will thank me for that).

     #+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
     #+end_src

     Let's define a few /cleaning/ functions :

- untabify the buffer

#+begin_src emacs-lisp
(defun my/untabify-buffer ()
  (interactive)
  (untabify (point-min) (point-max)))
#+end_src

- ident the buffer, using the mode indentation stuff

#+begin_src emacs-lisp
(defun my/indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max)))
#+end_src

- cleanup the buffer

#+begin_src emacs-lisp
  (defun my/cleanup-buffer ()
    "Perform a bunch of operations on the whitespace content of a buffer."
    (interactive)
    (indent-buffer)
    (untabify-buffer)
    (delete-trailing-whitespace))
#+end_src

- cleanup the region

#+begin_src emacs-lisp
(defun my/cleanup-region (beg end)
  "Remove tmux artifacts from region."
  (interactive "r")
  (dolist (re '("\\\\│\·*\n" "\W*│\·*"))
    (replace-regexp re "" nil beg end)))
#+end_src

And bind =cleanup-buffer= and =cleanup-region=.

#+begin_src emacs-lisp
(global-set-key (kbd "C-x M-t") 'cleanup-region)
(global-set-key (kbd "C-c n") 'cleanup-buffer)
#+end_src

**** TODO Evil
** TODO Modes
*** TODO Prompts
**** DONE ido

     Ido stands for “Interactively DO things”, and even though we'll try to use Helm
     for a lot of things, ido-mode replace beautifuly the default Emacs prompt.

     #+BEGIN_QUOTE
     There are many ways of improving your productivity when you use Emacs, and Ido (or “Interactively DO things”) is one of those packages that you enable and then never, ever turn off again. It’s simply that useful. By super-charging Emacs’s completion engine and improving the speed at which you open files and buffers, you will significantly cut down on the time spent doing these menial tasks.
     #+END_QUOTE

     We're gonna enhance even more ido with some additonnal package :

- A vertical presentation for ido
#+begin_src emacs-lisp
(require-package 'ido-vertical-mode)
#+end_src
- Fuzzy matching for ido (killer-feature !)
#+begin_src emacs-lisp
(require-package 'flx)
(require-package 'flx-ido)
#+end_src
- Use ido and fuzzy matching for ~M-x~, to get first to most recent command used
#+begin_src emacs-lisp
(require-package 'smex)
#+end_src

Let's configure ido, ido-vertical-mode and flx.

#+begin_src emacs-lisp
(require 'recentf)
(setq ido-enable-flex-matching t
     ido-everywhere t
     ido-use-virtual-buffers t
     ido-use-faces nil)
(ido-mode 1)
(ido-vertical-mode 1)
(flx-ido-mode 1)
#+end_src

Let's configure smex.

#+begin_src emacs-lisp
(smex-initialize)

(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
#+end_src

We bind the old ~M-x~ command to another, more complicated keys.

#+begin_src emacs-lisp
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+end_src

**** TODO helm

     #+begin_src emacs-lisp
(require-package 'helm)
     #+end_src
*** TODO deft
*** TODO Version control integration
**** TODO Git

     #+begin_src emacs-lisp
(require-package 'gitattributes-mode)
(require-package 'gitignore-mode)
     #+end_src


***** TODO magit

      #+begin_src emacs-lisp
(require-package 'magit)
      #+end_src

****** DONE Magit git-svn integration

       At work, I use ~git-svn~ to be able to use git locally but integrating in the
       subversion they use. Integrating ~magit~ and ~git-svn~ is a bonus but, as it
       exists, let's do it :).

       #+begin_src emacs-lisp
(require-package 'magit-svn)
       #+end_src

       The /quick key/ to get the ~magit-svn~ menu is ~N~.
***** TODO git fringe decoration

      #+begin_src emacs-lisp
     (when (window-system)
       (require-package 'git-gutter-fringe)
       (global-git-gutter-mode +1))
      #+end_src emacs-lisp

***** DONE git-annex

      [[http://git-annex.branchable.com/][Git-annex]] is a wonderful piece of software that I use a lot in my repositories.

      #+BEGIN_QUOTE
      git-annex allows managing files with git, without checking the file contents into git. While that may seem paradoxical, it is useful when dealing with files larger than git can currently easily handle, whether due to limitations in memory, time, or disk space.
      #+END_QUOTE

      In Emacs, it integrates with magit and dired mode. The annex subcommand for magit is ~@~.

      #+begin_src emacs-lisp
(require-package 'git-annex)
(require-package 'magit-annex)
      #+end_src

***** TODO gitty
***** TODO git-timemachine

***** TODO git-blame

***** TODO github

      # gist, githubclone, ..
*** TODO Org

    #+BEGIN_QUOTE
    Org-mode is a powerful system for organizing your complex life with simple plain-text files. It seamlessly integrates all your notes, mindmaps, TODO lists, calendar, day planner, and project schedules into a single system that can be easily searched (e.g. by grep), encrypted (e.g. by GnuPG), backed up and synced (e.g. by Dropbox), imported/exported, and accessed on the go (e.g. on an iPhone or Android smartphone). It can even be used for authoring web pages and documents.
    #+END_QUOTE

    Depending on how this section grows, org-mode might need its own litterate
    org configuration file.

**** Standard configuration

     First let's define the default directory for the =org= files, the one to be added
     to the agenda and the archives.

     #+begin_src emacs-lisp
(setq org-directory "~/desktop/org/")
(setq org-agenda-files '("~/desktop/org/todos/"))
(setq org-archive-location (concat org-directory "archive/%s_archive::"))
     #+end_src

     We'll also set which files should be opened using org-mode :
     =*.org=, =*.org_archive=, =*.txt=.

     #+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
     #+end_src

     Let's also define the default /todo-keywords/ and the workflow between them.

     #+begin_src emacs-lisp
       (setq org-todo-keywords
             (quote ((sequence "TODO(t)" "NEXT(n)" "PROGRESS(p)" "|" "DONE(d)")
                     (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING")
                     (sequence "REPORT" "BUG" "KNOWNCAUSE" "|" "FIXED"))))


       (setq org-todo-keyword-faces
             (quote (("TODO" :foreground "#EE0000" :weight bold)
                     ("NEXT" :foreground "#A197BF" :weight bold)
                     ("PROGRESS" :foreground "#A197BF" :weight bold)
                     ("DONE" :foreground "#8fbfdc" :weight bold)
                     ("WAITING" :foreground "orange" :weight bold)
                     ("HOLD" :foreground "magenta" :weight bold)
                     ("CANCELLED" :foreground "forest green" :weight bold)
                     ("MEETING" :foreground "forest green" :weight bold)
                     ("PHONE" :foreground "forest green" :weight bold))))

       (setq org-todo-state-tags-triggers
             (quote (("CANCELLED" ("CANCELLED" . t))
                     ("WAITING" ("WAITING" . t))
                     ("HOLD" ("WAITING" . t) ("HOLD" . t))
                     (done ("WAITING") ("HOLD"))
                     ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                     ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                     ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
     #+end_src

     Undefine some binding (=C-c [=, =C-c ]= since this breaks org-agenda files that
     have been defined in this file (a directory).

     #+begin_src emacs-lisp
       (add-hook 'org-mode-hook
                 '(lambda ()
                    (org-defkey org-mode-map "\C-c[" 'undefined)
                    (org-defkey org-mode-map "\C-c]" 'undefined)
                    (org-defkey org-mode-map "\C-c;" 'undefined))
                 'append)
     #+end_src

**** DONE Code blocks

     We are using a lot of code block in org-mode, in this file for example ; let's
     /fontify/ the code blocks first.

     #+begin_src emacs-lisp
(setq org-src-fontify-natively t)
     #+end_src

     Add a function to easily add a code block and bind it.

     #+begin_src emacs-lisp
       (defun my/org-insert-src-block (src-code-type)
         "Insert a `SRC-CODE-TYPE' type source code block in org-mode."
         (interactive
          (let ((src-code-types
                 '("emacs-lisp" "python" "C" "sh" "java" "js" "clojure" "C++" "css"
                   "calc" "asymptote" "dot" "gnuplot" "ledger" "lilypond" "mscgen"
                   "octave" "oz" "plantuml" "R" "sass" "screen" "sql" "awk" "ditaa"
                   "haskell" "latex" "lisp" "matlab" "ocaml" "org" "perl" "ruby"
                   "scheme" "sqlite")))
            (list (ido-completing-read "Source code type: " src-code-types))))
         (progn
           (newline-and-indent)
           (insert (format "#+BEGIN_SRC %s\n" src-code-type))
           (newline-and-indent)
           (insert "#+END_SRC\n")
           (previous-line 2)
           (org-edit-src-code)))

       (add-hook 'org-mode-hook
                 '(lambda ()
                    (local-set-key (kbd "C-c s e") 'org-edit-src-code)
                    (local-set-key (kbd "C-c s i") 'my/org-insert-src-block))
                 'append)
     #+end_src

**** TODO tags
*** TODO Flycheck

*** TODO Fly{check,make)
*** TODO Lua

*** TODO Haskell

    #+begin_src emacs-lisp
(require-package 'haskell-mode)
(require-package 'ghc)
(require-package 'ghci-completion)
(require-package 'shm)
    #+end_src

*** TODO Clojure

*** TODO Scala

*** TODO Java

*** TODO Python

*** TODO Ruby

*** TODO Shell(s)
*** TODO Go

*** TODO Docker

*** TODO fic-mode
*** TODO Linux related modes
**** TODO Archlinux
     I'm using [[http://archlinux.org][Archlinux]] on my personnal computers and I maintain a few packages
     on [[https://aur.archlinux.org][aur]], hopefully there is a mode for that.

     #+BEGIN_SRC emacs-lisp
       (require-package 'pkgbuild-mode)
     #+END_SRC

**** TODO Debian
** TODO Mails
