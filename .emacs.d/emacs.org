#+TITLE: Vincent Demeester's emacs configuration
#+AUTHOR: Vincent Demeester
#+EMAIL: vincent [at] demeester [dot] fr

This is my first attempt to create a readable, maintainable and self documented
emacs configuration. I'm hopeful that using Org-Babel and a literate
programming style will help.

* TODO How to use my configuration
  


* Configuration

** Personal information

#+begin_src emacs-lisp
(setq user-full-name "Vincent Demeester"
      user-mail-address "vincent@demeester.fr")
#+end_src

** General configuration

*** Appearance

Unclutter the screen by removing menubar, toolbar and stuff, and by disabling
the splash-screen.

#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-splash-screen t)
#+end_src

We want to see somewhere the column and line number, and also highlight the
current line to see it easily.

#+begin_src emacs-lisp
(line-number-mode 1)
(column-number-mode 1)
(global-hl-line-mode 1)
#+end_src

Depending on the files opened and the syntax highlighting enabled, ~font-lock-mode~
can be slow, we try to limit that, to keep Emacs reactive.

#+begin_src emacs-lisp
(setq font-lock-maximum-decoration 2)
#+end_src
**** Fringe decorations

   [[http://www.emacswiki.org/emacs/TheFringe][The fringe]] is the vertical region at the right and left of the
   buffer. Emacs lets you customize it of course.

   Here I set up git diffs and buffer position in the fringe.

   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
(setq-default indicate-buffer-boundaries 'left)
(setq-default indicate-empty-lines +1)
   #+END_SRC
**** Fonts

#+begin_src emacs-lisp
(set-default-font "Ubuntu Mono-12")
(set-frame-font "Ubuntu Mono-12")
(set-face-attribute 'default nil :family "Ubuntu Mono" :height 110)
#+end_src

**** Themes

First let's install the theme...

#+begin_src emacs-lisp
(require-package 'sublime-themes)
(require-package 'leuven-theme)
#+end_src

... and load it.
#+begin_src emacs-lisp
(load-theme 'leuven t)
#+end_src

***** TODO Specific theme for modes

**** Powerline

We are going to use [[https://github.com/milkypostman/powerline][powerline]] because it is way more sexy than the default modeline design.

#+begin_src emacs-lisp
(require-package 'powerline)
(powerline-default-theme)
#+end_src

*** Behaviour
**** Encoding

Make sur that we use ~utf-8~ by default.

#+begin_src emacs-lisp
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)
#+end_src

**** Mouse
Move the mouse away to not bother.

#+begin_src emacs-lisp
(mouse-avoidance-mode 'jump)
#+end_src

**** Backup files

Files suffixed with ~\~~ in the current directory are ugly. We are still going to use
backup files, as it can saves some time in case of trouble, but we'll move them
somewhere else : ~/tmp/emacs-1001~ (for a user with the uid = 1001).

Note the we store them in /tmp so in case of a reboot, we loose them.

#+begin_src emacs-lisp
(defconst emacs-tmp-dir (format "%s/%s%s/" temporary-file-directory "emacs" (user-uid)))
(setq backup-directory-alist
      `((".*" . ,emacs-tmp-dir))
      auto-save-file-name-transforms
      `((".*" ,emacs-tmp-dir t))
      auto-save-list-file-prefix emacs-tmp-dir)
#+end_src

Now that all the temporary files are out of the way, we can keep more of them.

#+begin_src emacs-lisp
(setq delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)
#+end_src

** TODO Modes
*** Prompts
**** DONE ido

Ido stands for “Interactively DO things”, and even though we'll try to use Helm
for a lot of things, ido-mode replace beautifuly the default Emacs prompt.

#+BEGIN_QUOTE
There are many ways of improving your productivity when you use Emacs, and Ido (or “Interactively DO things”) is one of those packages that you enable and then never, ever turn off again. It’s simply that useful. By super-charging Emacs’s completion engine and improving the speed at which you open files and buffers, you will significantly cut down on the time spent doing these menial tasks.
#+END_QUOTE

We're gonna enhance even more ido with some additonnal package :

- A vertical presentation for ido
#+begin_src emacs-lisp
(require-package 'ido-vertical-mode)
#+end_src
- Fuzzy matching for ido (killer-feature !)
#+begin_src emacs-lisp
(require-package 'flx)
(require-package 'flx-ido)
#+end_src
- Use ido and fuzzy matching for ~M-x~, to get first to most recent command used
#+begin_src emacs-lisp
(require-package 'smex)
#+end_src

Let's configure ido, ido-vertical-mode and flx.

#+begin_src emacs-lisp
(require 'recentf)
(setq ido-enable-flex-matching t
     ido-everywhere t
     ido-use-virtual-buffers t
     ido-use-faces nil)
(ido-mode 1)
(ido-vertical-mode 1)
(flx-ido-mode 1)
#+end_src

Let's configure smex.

#+begin_src emacs-lisp
(smex-initialize)

(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
#+end_src

We bind the old ~M-x~ command to another, more complicated keys.

#+begin_src emacs-lisp
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+end_src

**** TODO helm

#+begin_src emacs-lisp
(require-package 'helm)
#+end_src

*** TODO Version control integration
**** TODO Git

***** TODO Magit

#+begin_src emacs-lisp
(require-package 'magit)
#+end_src

****** TODO Magit git-svn integration

At work, I use ~git-svn~ to be able to use git locally but integrating in the
subversion they use. Integrating ~magit~ and ~git-svn~ is a bonus but, as it
exists, let's do it :).

#+begin_src emacs-lisp
(require-package 'magit-svn)
#+end_src

The /quick key/ to get the ~magit-svn~ menu is ~N~.

***** TODO Git fringe decoration

#+begin_src emacs-lisp
     (when (window-system)
       (require-package 'git-gutter-fringe)
       (global-git-gutter-mode +1))
#+end_src emacs-lisp

*** TODO Org

*** TODO Flycheck
*** TODO Lua

*** TODO Haskell

#+begin_src emacs-lisp
(require-package 'haskell-mode)
(require-package 'ghc)
(require-package 'ghci-completion)
(require-package 'shm)
#+end_src

*** TODO Clojure

*** TODO Scala

*** TODO Java

*** TODO Python

*** TODO Ruby

*** TODO Shell(s)
*** TODO Go

*** TODO Docker

*** TODO Archlinux

** TODO Mails
